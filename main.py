import telebot
from datetime import datetime
from telebot import types
from sqlalchemy.orm import Session
from models import Task, SessionLocal
import configparser

# –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = configparser.ConfigParser()
config.read('config.ini')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
BOT_TOKEN = config['telegram']['token']

bot = telebot.TeleBot(BOT_TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
def log_action(user_id, action, task_text=""):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{timestamp}] User {user_id}: {action} - {task_text}")

# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    markup.add(types.KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"),
               types.KeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"))
    markup.add(types.KeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É"),
               types.KeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"))
    markup.add(types.KeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"))
    return markup

# –ö–æ–º–∞–Ω–¥–∞ /start —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø TaskFlowBot.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:", reply_markup=main_menu())
    log_action(message.from_user.id, "started bot")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def handle_menu(message):
    if message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, add_task)
    elif message.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏":
        list_tasks(message)
    elif message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É":
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, complete_task_step)
    elif message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, delete_task_step)
    elif message.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É":
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        bot.register_next_step_handler(msg, edit_task_step_number)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
def add_task(message):
    task_text = message.text.strip()
    user_id = message.from_user.id
    if task_text:
        db = next(get_db())  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        new_task = Task(user_id=user_id, text=task_text, completed=False, created_at=datetime.now())
        db.add(new_task)
        db.commit()
        db.refresh(new_task)
        bot.reply_to(message, f"–ó–∞–¥–∞—á–∞ '{task_text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        log_action(user_id, "added task", task_text)
    else:
        bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á
def list_tasks(message):
    user_id = message.from_user.id
    db = next(get_db())  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    tasks = db.query(Task).filter(Task.user_id == user_id).all()
    
    if tasks:
        response = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
        for index, task in enumerate(tasks, start=1):
            status = "‚úîÔ∏è" if task.completed else "‚ùå"
            response += f"{index}. {task.text} - {status}\n"  # –ù—É–º–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.reply_to(message, response)
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!")
    log_action(user_id, "listed tasks")

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä—É
def complete_task_step(message):
    try:
        task_number = int(message.text.strip())
        user_id = message.from_user.id
        db = next(get_db())  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        
        tasks = db.query(Task).filter(Task.user_id == user_id).order_by(Task.id).all()
        
        if 1 <= task_number <= len(tasks):
            task = tasks[task_number - 1]
            if not task.completed:
                task.completed = True
                db.commit()
                bot.reply_to(message, f"–ó–∞–¥–∞—á–∞ {task_number} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")
                log_action(user_id, "completed task", f"ID {task.id}")
            else:
                bot.reply_to(message, f"–ó–∞–¥–∞—á–∞ {task_number} —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
        else:
            bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
    except ValueError:
        msg = bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        bot.register_next_step_handler(msg, complete_task_step)

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä—É
def delete_task_step(message):
    try:
        task_number = int(message.text.strip())
        user_id = message.from_user.id
        db = next(get_db())  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        
        tasks = db.query(Task).filter(Task.user_id == user_id).order_by(Task.id).all()
        
        if 1 <= task_number <= len(tasks):
            task = tasks[task_number - 1]
            db.delete(task)
            db.commit()
            bot.reply_to(message, f"–ó–∞–¥–∞—á–∞ {task_number} —É–¥–∞–ª–µ–Ω–∞!")
            log_action(user_id, "deleted task", f"ID {task.id}")
        else:
            bot.reply_to(message, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
    except ValueError:
        msg = bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        bot.register_next_step_handler(msg, delete_task_step)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –Ω–æ–º–µ—Ä—É
def edit_task_step_number(message):
    try:
        task_number = int(message.text.strip())
        user_id = message.from_user.id
        db = next(get_db())  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        
        tasks = db.query(Task).filter(Task.user_id == user_id).order_by(Task.id).all()
        
        if 1 <= task_number <= len(tasks):
            task = tasks[task_number - 1]
            bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞—á–∏:")
            bot.register_next_step_handler(message, edit_task_step_text, task.id)
        else:
            raise ValueError("–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
    except ValueError:
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        bot.register_next_step_handler(msg, edit_task_step_number)

# –í—Ç–æ—Ä–æ–π —à–∞–≥ ‚Äî –∑–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
def edit_task_step_text(message, task_id):
    new_text = message.text.strip()
    db = next(get_db())  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏

    if new_text:
        task = db.query(Task).filter(Task.id == task_id).first()
        if task:
            task.text = new_text
            db.commit()
            bot.reply_to(message, f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: '{new_text}'")
            log_action(message.from_user.id, "edited task", f"ID {task_id} to '{new_text}'")
        else:
            bot.reply_to(message, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        msg = bot.reply_to(message, "–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:")
        bot.register_next_step_handler(msg, edit_task_step_text, task_id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
